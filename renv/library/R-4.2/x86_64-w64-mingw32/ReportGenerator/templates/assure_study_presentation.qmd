---
title: "Signal Evaluation Report"
format:
  revealjs: 
    self-contained: true
    scrollable: true
    theme: [default, presentation_style.scss]
    logo: img/logo.png
    title-slide-attributes:
      data-background-color: "#EB1700"
    footer: "ASSURE Standardized report"
    slide-number: true
    show-slide-number: all
    menu:
      side: left
      numbers: true
params: 
  server: NULL
  password: NULL
  username: NULL
  dbms: NULL
  resultsSchema: NULL
  title: NULL
  lead: NULL
  date: NULL
  targetId: NULL
  outcomeId: NULL
  comparatorId: NULL
  subsetId: NULL
  covariateIds: NULL
  friendlyNames: NULL
  details: NULL
  evaluationText: NULL
---

## Signal Evaluation Overview

```{r}
#| echo: false
#| hide: true

defaultPageSize <- 10

library(reactable)
library(dplyr)
resultsSchema <- params$resultsSchema
server <- params$server
username <- params$username
password <- params$password
dbms <- params$dbms

subsetId <- params$subsetId
outcomeId <- params$outcomeId
sccsTargetId <- params$targetId
targetId <- params$targetId
comparatorId <- params$comparatorId

# if a subset is specified then update the ids
if(!is.null(subsetId)){
 targetId <- targetId*1000 + subsetId 
 comparatorId <- comparatorId*1000 + subsetId 
}

# TODO - This approach needs some discussion
friendlyNames <- params$friendlyNames

targetName <- "None specified"
comparatorName <- "None specified"
indicationName <- "None specified"
outcomeName <- "None specified"

targetName <- params$friendlyNames$targetName
comparatorName <- params$friendlyNames$comparatorName
indicationName <- params$friendlyNames$indicationName
outcomeName <- params$friendlyNames$outcomeName

studyPeriod <- params$details$studyPeriod
restrictions <- params$details$restrictions

evaluationText <- params$evaluationText

# get databases
dbs <- ReportGenerator:::getDbs(
  resultsSchema = resultsSchema,
  server = server,
  username = username,
  password = password,
  dbms = dbms
)

```


:::: {.columns}

::: {.column width="50%"}
> Target: `r targetName` @sec-target

> Comparator: `r comparatorName` @sec-comparator

> Indication: `r indicationName` @sec-indication

> Outcome: `r outcomeName` @sec-outcome
:::

::: {.column width="10%"}
<!-- empty column to create gap -->
:::

::: {.column width="40%"}
::: {.border}
::: {style="font-size: 50%;"}

| Study Period: 
|  `r studyPeriod`

| Restrictions: 
|  `r restrictions`

| Analytic Methods:
|   * Characterization
|   * Propensity-matched comparative cohort on treatment
|   * Self-controlled case series (SCCS)
|   * Patient-level prediction

| Databases: 
|   * `r dbs[['us claims']]` US Claims
|   * `r dbs[['us ehr']]` US EHR
|   * `r dbs[['non-us claims']]` Non-US Claims

:::
:::
:::

::::

::: footer
`r paste0(params$title, ' - ', params$lead, ' - ', as.character(params$date))`
:::

# Characterization {.break-slides}

## Cohort Incidence

::: {style='font-size: 50%;'}
::: {.panel-tabset .nav-pills}

```{r}
#| echo: false
#| results: 'asis'

incidence <- ReportGenerator:::getIncidenceRates(
    server = server,
    username = username,
    password = password,
    dbms = dbms,
    schema = resultsSchema,
    targetId = targetId,
    outcomeId = outcomeId
)

tars <- ReportGenerator:::getTars(
  data = incidence
  )

for(tar in tars){
  cat(paste0('\n\n### TAR: ',paste0('(',tar$tarStartWith, " + ", tar$tarStartOffset, ') - (', tar$tarEndWith, " + ", tar$tarEndOffset, ')'),'\n\n'))

  reactObj <- reactable::reactable(
  data = incidence %>% 
    dplyr::filter(
      .data$ageGroupName == 'Any' &
      .data$genderName == 'Any' &
      .data$startYear == 'Any' &
      .data$tarStartWith == tar$tarStartWith  &
      .data$tarStartOffset == tar$tarStartOffset &
      .data$tarEndWith == tar$tarEndWith &
      .data$tarEndOffset ==  tar$tarEndOffset
    ) %>%
    dplyr::select(
      'database',
      #'ageGroupName',
      #'genderName',
      #'startYear',
      'personsAtRisk',
      'personDays',
      'personOutcomes',
      'outcomes',
      'incidenceProportionP100p',
      'incidenceRateP100py'
    ), 
columns = list(
  personOutcomes = reactable::colDef(
    cell = function(value) {
    if (value == -5) "< 5" else value
  }
    ),
  outcomes = reactable::colDef(
    cell = function(value) {
    if (value == -5) "< 5" else value
  }
    ),
  incidenceProportionP100p = reactable::colDef(
    format = reactable::colFormat(digits = 2)
    ),
  incidenceRateP100py = reactable::colDef(
    format = reactable::colFormat(digits = 2)
    )
),
 highlight = TRUE, 
 striped = T, 
 defaultPageSize = defaultPageSize
)
print(htmltools::tagList(reactObj))

}

```

:::
:::

## Cohort Demographics

::: {style='font-size: 50%;'}
::: {.panel-tabset .nav-pills}

```{r}
#| echo: false
#| results: 'asis'

demographics <- ReportGenerator:::getDemographics(
    server = server,
  username = username,
  password = password,
  dbms = dbms,
  schema = resultsSchema,
  targetId = targetId,
  outcomeId = outcomeId
  )

# loop over tar settings as tabs

tars <- ReportGenerator:::getTars(
  data = demographics$sex,  
  tarColumnNames = c(
    'startAnchor', 
    'riskWindowStart',
    'endAnchor',
    'riskWindowEnd'
    )
  )

for(tar in tars){
cat(paste0('\n### TAR: ',paste0('(',tar$startAnchor, " + ", tar$riskWindowStart, ') - (', tar$endAnchor, " + ", tar$riskWindowEnd, ')'),' \n'))
 
sexPlot <- ReportGenerator:::plotSexDistributions(
    sexData = demographics$sex,
    riskWindowStart = tar$riskWindowStart,
    riskWindowEnd = tar$riskWindowEnd, 
    startAnchor = tar$startAnchor, 
    endAnchor = tar$endAnchor
)
agePlot <- ReportGenerator:::plotAgeDistributions(
    ageData = demographics$age,
    riskWindowStart = tar$riskWindowStart,
    riskWindowEnd = tar$riskWindowEnd, 
    startAnchor = tar$startAnchor, 
    endAnchor = tar$endAnchor
)

print(
ggpubr::annotate_figure(
p = ggpubr::ggarrange(
  sexPlot, 
  agePlot, 
  heights = c(1, 2),
  ncol = 1, 
  nrow = 2,
  labels = c("A", "B") 
  ), 
fig.lab = "Demographics for patients with outcome during time-at-risk vs patients without outcome during time-at-risk when first exposed.", 
fig.lab.pos = "bottom.left"
)
)
}

```

:::
:::

## Cohort Characterization

::: {style='font-size: 50%;'}
::: {.panel-tabset .nav-pills}

```{r}
#| echo: false
#| results: 'asis'

chars <- ReportGenerator::getCharacterization(
    server = server,
  username = username,
  password = password,
  dbms = dbms,
  schema = resultsSchema,
  targetId = targetId,
  outcomeId = outcomeId,
  covariateIds = params$covariateIds
  )

tars <- ReportGenerator:::getTars(
  data = chars,  
  tarColumnNames = c(
    'startAnchor', 
    'riskWindowStart',
    'endAnchor',
    'riskWindowEnd'
    )
  )

for(tar in tars){
cat(paste0('\n\n### TAR: ',paste0('(',tar$startAnchor, " + ", tar$riskWindowStart, ') - (', tar$endAnchor, " + ", tar$riskWindowEnd, ')'),' \n\n'))
  
  charsData <- chars %>%
    dplyr::select(
        'database',
        'covariateName',
        'cohortType',
        'averageValue'
    ) %>%
    tidyr::pivot_wider(
        id_cols = c('database','covariateName'), 
        names_from = c('cohortType'), 
        values_from = 'averageValue', 
        values_fn = mean, values_fill = 0
    ) %>%
    dplyr::mutate(
        smd = abs(.data$TnO - .data$TnOc)/sqrt(1/2*((.data$TnO*(1-.data$TnO)) + (.data$TnOc*(1-.data$TnOc)) ))
    )
  
print(
  shiny::tagList(
    reactable::reactable(
      data = charsData, 
        columns = list(
          covariateName = reactable::colDef(
            filterable = T, 
            minWidth = 300 
          ),
          TnO = reactable::colDef(
            aggregate = "mean",
            name = 'With Outcome',
            format = reactable::colFormat(digits = 2)
          ),
          TnOc = reactable::colDef(
            aggregate = "mean",
            name = 'No Outcome',
            format = reactable::colFormat(digits = 2)
          ),
          smd = reactable::colDef(
            aggregate = "mean",
            name = 'SMD',
            format = reactable::colFormat(digits = 2)
          )
        ),
        #groupBy = c('database'), 
        groupBy = c('covariateName'), 
        defaultPageSize = defaultPageSize,
        highlight = TRUE, 
        striped = T
      )
    )
)

}

```

:::
:::

# Causal Inference {.break-slides}

## Cohort Method

::: {style='font-size: 50%;'}
::: {.panel-tabset .nav-pills}

### Study Diagnostics

:::: {.columns}

::: {.column width="85%"}

```{r}
cmTableDiag <- ReportGenerator:::getCmDiagnosticsData(
  server = server,
  username = username,
  password = password,
  dbms = dbms,
  schema = resultsSchema,
  targetId = targetId,
  outcomeId = outcomeId,
  comparatorId = comparatorId
)

# add table
reactable::reactable(
      data = cmTableDiag %>%
        dplyr::select(
          "databaseName",
          "analysis",
          "comparator",
          "summaryValue"
        )
        ,
        columns = list(
          databaseName = reactable::colDef(
            name = 'Database'
          ),
          summaryValue = reactable::colDef(
        name = "Overall Diagnostic",
        style = function(value) {
          color <- 'orange'
          if(is.na(value)){
            color <- 'black'
          }else if(value == 'Pass'){
            color <- '#AFE1AF'
          }else if(value == 'Fail'){
            color <- '#E97451'
          }
          list(background = color)
        }
      )
        ), 
        defaultPageSize = defaultPageSize,
        highlight = TRUE, 
        striped = T
      )


```

:::

::: {.column width="15%"}

> Fail: Study failed ASSURE diagnostics

> Pass: Study passed without warnings

> Number: Passed wth Number of warnings

:::

::::

```{r}
cmTable <- ReportGenerator:::getCMEstimation(
  server = server,
  username = username,
  password = password,
  dbms = dbms,
  schema = resultsSchema,
  targetId = targetId,
  outcomeId = outcomeId,
  comparatorId = comparatorId
)

cmMeta <- ReportGenerator:::getCmMetaEstimation(
  server = server,
  username = username,
  password = password,
  dbms = dbms,
  schema = resultsSchema,
  targetId = targetId,
  outcomeId = outcomeId,
  comparatorId = comparatorId
)
```

### Table Results
```{r}
reactable::reactable(
      data = cmTable %>% 
        dplyr::select(
          'database',
          'comparator',
          'description',
          'calibratedRr',
          'calibratedCi95Lb',
          'calibratedCi95Ub',
          'calibratedP',
          'calibratedLogRr',
          'calibratedSeLogRr'
        ),
        columns = list(
          calibratedRr = reactable::colDef(
            format = reactable::colFormat(digits = 2)
          ),
         calibratedCi95Lb = reactable::colDef(
            format = reactable::colFormat(digits = 2)
          ),
         calibratedCi95Ub = reactable::colDef(
            format = reactable::colFormat(digits = 2)
          ),
          calibratedP = reactable::colDef(
            format = reactable::colFormat(digits = 2)
          ),
         calibratedLogRr = reactable::colDef(
            format = reactable::colFormat(digits = 2)
          ),
         calibratedSeLogRr = reactable::colDef(
            format = reactable::colFormat(digits = 2)
          )
        ),
        defaultPageSize = defaultPageSize,
        highlight = TRUE, 
        striped = T
      )
```

### Plot Results
::: {.panel-tabset}
```{r}
#| echo: false
#| results: 'asis'

# add Justin's nice code for cmTable
# loop over tar
analyses <- unique(cmTable$description)
analysisIds <- unique(cmTable$analysisId)

for (i in seq_along(analyses)) {
  analysis <- analyses[[i]]
  analysisId <- analysisIds[[i]]
  cat(paste0('\n\n#### ', analysis ,'\n\n'))

  p <- ReportGenerator:::plotCmEstimates(
    cmData = cmTable,
    cmMeta = cmMeta,
    targetName = targetName,
    comparatorName = comparatorName,
    selectedAnalysisId = analysisId
  )
  
  print(p)
}

```
:::

:::
:::

## Self Controlled Case Series

::: {style='font-size: 50%;'}
::: {.panel-tabset .nav-pills}

### Study Diagnostics
:::: {.columns}

::: {.column width="85%"}

```{r}
sccsTableDiag <- ReportGenerator:::getSccsDiagnosticsData(
  server = server,
  username = username,
  password = password,
  dbms = dbms,
  schema = resultsSchema,
  targetId = sccsTargetId,
  outcomeId = outcomeId
)

# add table
reactable::reactable(
      data = sccsTableDiag %>%
        dplyr::select(
          "databaseName",
          "analysis",
          "summaryValue"
        )
        ,
        columns = list(
          databaseName = reactable::colDef(
            name = 'Database'
          ),
          summaryValue = reactable::colDef(
        name = "Overall Diagnostic",
        style = function(value) {
          color <- 'orange'
          if(is.na(value)){
            color <- 'black'
          }else if(value == 'Pass'){
            color <- '#AFE1AF'
          }else if(value == 'Fail'){
            color <- '#E97451'
          }
          list(background = color)
        }
      )
        ), 
        defaultPageSize = defaultPageSize,
        highlight = TRUE, 
        striped = T
      )
```

:::

::: {.column width="15%"}

> Fail: Study failed ASSURE diagnostics

> Pass: Study passed without warnings

> Number: Passed wth Number of warnings

:::

::::

```{r}
sccsTable <- ReportGenerator:::getSccsEstimation(
  server = server,
  username = username,
  password = password,
  dbms = dbms,
  schema = resultsSchema,
  targetId = sccsTargetId,
  outcomeId = outcomeId
)

sccsMeta <- ReportGenerator:::getSccsMetaEstimation(
  server = server,
  username = username,
  password = password,
  dbms = dbms,
  schema = resultsSchema,
  targetId = sccsTargetId,
  outcomeId = outcomeId
)
```

### Table Results
```{r}
reactable::reactable(
      data = sccsTable %>% 
        dplyr::select(
          'databaseName',
          'description',
          'calibratedRr',
          'calibratedCi95Lb',
          'calibratedCi95Ub',
          'calibratedP',
          'calibratedLogRr',
          'calibratedSeLogRr'
        ),
        columns = list(
          calibratedRr = reactable::colDef(
            format = reactable::colFormat(digits = 2)
          ),
         calibratedCi95Lb = reactable::colDef(
            format = reactable::colFormat(digits = 2)
          ),
         calibratedCi95Ub = reactable::colDef(
            format = reactable::colFormat(digits = 2)
          ),
          calibratedP = reactable::colDef(
            format = reactable::colFormat(digits = 2)
          ),
         calibratedLogRr = reactable::colDef(
            format = reactable::colFormat(digits = 2)
          ),
         calibratedSeLogRr = reactable::colDef(
            format = reactable::colFormat(digits = 2)
          )
        ),
        defaultPageSize = defaultPageSize,
        highlight = TRUE, 
        striped = T
      )
```

### Plot Results
::: {.panel-tabset}
```{r}
#| echo: false
#| results: 'asis'

analyses <- unique(sccsTable$description)
analysisIds <- unique(sccsTable$analysisId)

for (i in seq_along(analyses)) {
  analysis <- analyses[[i]]
  analysisId <- analysisIds[[i]]
  cat(paste0('\n\n#### ', analysis ,'\n\n'))
    
  p <- ReportGenerator:::plotSccsEstimates(
     sccsData = sccsTable,
     sccsMeta = sccsMeta,
     targetName = targetName,
     selectedAnalysisId = analysisId
  )

  print(p)
}

```
:::

:::
:::


# Prediction {.break-slides}

## Models

::: {style='font-size: 50%;'}

:::: {.panel-tabset .nav-pills}

### Model Summary

:::: {.columns}

::: {.column width="80%"}

```{r}
pTable <- ReportGenerator:::getPredictionResults(
    server = server,
    username = username,
    password = password,
    dbms = dbms,
    schema = resultsSchema,
    targetId = targetId,
    outcomeId = outcomeId
)

reactable::reactable(
      data = pTable %>% 
        dplyr::mutate(
          tar = paste0('( ',.data$tarStartAnchor, ' + ', .data$tarStartDay, ') - ( ', .data$tarEndAnchor, ' + ', .data$tarEndDay, ')')
        ) %>%
        dplyr::select(
          #'modelDesignId',
          'modelType',
          'database',
          'tar',
          'populationSize',
          'outcomeCount',
          'auroc',
          'estatistic',
          'brier'
        ),
        columns = list(
          auroc = reactable::colDef(
            name = 'AUROC',
            format = reactable::colFormat(digits = 2)
          ),
          estatistic = reactable::colDef(
            name = 'e-stat',
            format = reactable::colFormat(digits = 2)
          ),
          brier = reactable::colDef(
            name = 'brier',
            format = reactable::colFormat(digits = 2)
          ),
          populationSize = reactable::colDef(
            name = 'N'
          )
        ),
        defaultPageSize = defaultPageSize,
        highlight = TRUE, 
        striped = T
      )

```

:::

::: {.column width="20%"}

> AUROC: A measure of model discrimination. 1 is best.  Probability a random person with the outcome has a higher risk than an random person without the outcome.

> e-stat: A measure of calibration.  Smaller is better. How accurate the predicted risks are.

> brier: Overall error. Smaller is better.

:::

::::


### Top Predictors

::: {.panel-tabset .nav-pills}

```{r}
#| echo: false
#| results: 'asis'

topPreds <- ReportGenerator:::getTopPredictors(
  dbms = dbms,
  server = server,
  username = username,
  password = password,
  schema = resultsSchema,
  targetId = targetId,
  outcomeId = outcomeId
)

databases <- unique(topPreds$CDM_SOURCE_ABBREVIATION)
  
for(database in databases){
  
  cat(paste0('\n\n#### ', database))
  cat('\n\n')
  
print(
  shiny::tagList(
    reactable::reactable(
      data = topPreds %>% 
        dplyr::filter(.data$CDM_SOURCE_ABBREVIATION == !! database) %>%
        dplyr::mutate(
          tar = paste0(
            '( ',.data$TAR_START_ANCHOR, ' + ', .data$TAR_START_DAY, ' ) - ( ', 
            .data$TAR_END_ANCHOR, ' + ', .data$TAR_END_DAY, ' )'
        )
        ) %>%
        dplyr::select(
          'tar',
          'COVARIATE_NAME',
          'COVARIATE_VALUE',
          'WITH_NO_OUTCOME_COVARIATE_MEAN',
          'WITH_OUTCOME_COVARIATE_MEAN',
          'STANDARDIZED_MEAN_DIFF'
        ),
        columns = list(
          STANDARDIZED_MEAN_DIFF = reactable::colDef(
            name = 'SMD',
            format = reactable::colFormat(digits = 2)
          ),
         WITH_OUTCOME_COVARIATE_MEAN = reactable::colDef(
           name = 'With Outcome',
            format = reactable::colFormat(digits = 2)
          ),
         WITH_NO_OUTCOME_COVARIATE_MEAN = reactable::colDef(
           name = 'No Outcome',
            format = reactable::colFormat(digits = 2)
          ),
          COVARIATE_VALUE = reactable::colDef(
            name = 'Value',
            format = reactable::colFormat(digits = 2)
          ),
         
         
         COVARIATE_NAME = reactable::colDef(
            name = 'Predictor'
          ),
         tar = reactable::colDef(
            name = 'Time-at-risk'
          )
        ),
        defaultPageSize = defaultPageSize,
        highlight = TRUE, 
        striped = T
      )
  ))
}
```
:::


::::

:::

# Conclusions {.break-slides}

## Executive Summary

```{r}
#| echo: false
#| results: 'asis'

cat(paste(unlist(lapply(
    evaluationText, 
    function(txt){
        paste0('\n* ', txt)
    }
)), collapse = '\n'))


```

# Supplementary {.break-slides}

# Cohorts

```{r}
#| echo: false
#| results: 'asis'
# Target
cat(paste0('\n\n## Target ',targetName, ' {#sec-target}\n\n'))
```

> Full name: `r ReportGenerator:::getCohortName(server = server, username = username, password = password, dbms = dbms, schema = resultsSchema, cohortId = params$targetId)`

::: {.callout-note title="Cohort Definition"}
### Cohort Definition
```{r}
#| echo: false
#| results: 'asis'

json <- ReportGenerator:::getCohortDescription(
  server = server, 
  username = username, 
  password = password, 
  dbms = dbms, 
  schema = resultsSchema, 
  cohortId = params$targetId
  )

 markdown <- tryCatch(
  {CirceR::cohortPrintFriendly(json)}, 
  error = function(e) return('')
)
#markdown <- gsub('###', '####',markdown)
cat(markdown)

```

:::

```{r}
#| echo: false
#| results: 'asis'
# if subset is not null then add that here
if(!is.null(subsetId)){
  mainCohort <- ReportGenerator:::getCohortName(
  server = server, 
  username = username, 
  password = password, 
  dbms = dbms, 
  schema = resultsSchema, 
  cohortId = params$targetId
  )
  subCohort <- ReportGenerator:::getCohortName(
  server = server, 
  username = username, 
  password = password, 
  dbms = dbms, 
  schema = resultsSchema, 
  cohortId = targetId
  )
  
  cat("\n\n::: {.callout-note title='Subset'}")
  cat('\n\n### Subset (not used in SCCS)')
  
  cat('\n\n')
  cat(substring(subCohort, nchar(mainCohort)+5, nchar(subCohort)))
  cat('\n\n:::')
}

```



```{r}
#| echo: false
#| results: 'asis'
# Outcome
cat(paste0('\n\n## Outcome ',outcomeName, ' {#sec-outcome}\n\n'))
```

> Full name: `r ReportGenerator:::getCohortName(server = server, username = username, password = password, dbms = dbms, schema = resultsSchema, cohortId = outcomeId)`

::: {.callout-note title="Cohort Definition"}
### Cohort Definition
```{r}
#| echo: false
#| results: 'asis'

json <- ReportGenerator:::getCohortDescription(
  server = server, 
  username = username, 
  password = password, 
  dbms = dbms, 
  schema = resultsSchema, 
  cohortId = outcomeId
  )

 markdown <- tryCatch(
  {CirceR::cohortPrintFriendly(json)}, 
  error = function(e) return('')
)
cat(markdown)

```

:::

```{r}
#| echo: false
#| results: 'asis'
if(!is.null(subsetId)){
# Indication
# subCohort from the target code
indicationId <- strsplit(
  strsplit(subCohort, '\\)')[[1]][1], 
  '\\('
  )[[1]][2]

cat(
  paste0('\n\n## Indication ',indicationName, ' {#sec-indication}\n\n')
  )

iName <- ReportGenerator:::getCohortName(server = server, username = username, password = password, dbms = dbms, schema = resultsSchema, cohortId = indicationId)

cat(paste0("\n\n> Full name: ", iName))
cat('\n\n::: {.callout-note title="Cohort Definition"}')
cat("\n\n### Cohort Definition\n\n")

json <- ReportGenerator:::getCohortDescription(
  server = server, 
  username = username, 
  password = password, 
  dbms = dbms, 
  schema = resultsSchema, 
  cohortId = indicationId
  )

 markdown <- tryCatch(
  {CirceR::cohortPrintFriendly(json)}, 
  error = function(e) return('')
)
cat(markdown)
cat('\n\n:::')
}
```



```{r}
#| echo: false
#| results: 'asis'
# Comparator
cat(paste0('\n\n## Comparator ',comparatorName, ' {#sec-comparator}\n\n'))
```

> Full name: `r ReportGenerator:::getCohortName(server = server, username = username, password = password, dbms = dbms, schema = resultsSchema, cohortId = params$comparatorId)`

::: {.callout-note title="Cohort Definition"}
### Cohort Definition
```{r}
#| echo: false
#| results: 'asis'

json <- ReportGenerator:::getCohortDescription(
  server = server, 
  username = username, 
  password = password, 
  dbms = dbms, 
  schema = resultsSchema, 
  cohortId = params$comparatorId
  )

 markdown <- tryCatch(
  {CirceR::cohortPrintFriendly(json)}, 
  error = function(e) return('')
)
#markdown <- gsub('###', '####',markdown)
cat(markdown)

```

:::

```{r}
#| echo: false
#| results: 'asis'
# if subset is not null then add that here
if(!is.null(subsetId)){
  mainCohort <- ReportGenerator:::getCohortName(
  server = server, 
  username = username, 
  password = password, 
  dbms = dbms, 
  schema = resultsSchema, 
  cohortId = params$comparatorId
  )
  subCohort <- ReportGenerator:::getCohortName(
  server = server, 
  username = username, 
  password = password, 
  dbms = dbms, 
  schema = resultsSchema, 
  cohortId = comparatorId
  )
  
  cat("\n\n::: {.callout-note title='Cohort Definition'}")
  cat('\n\n### Subset (not used in SCCS)')
  
  cat('\n\n')
  cat(substring(subCohort, nchar(mainCohort)+5, nchar(subCohort)))
  cat('\n\n:::')
}

```

# Protocol
